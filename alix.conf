# NanoBSD config for pcengines alix
#
# vi: set ft=sh :

NANO_SRC=/usr/src
NANO_KERNEL=ALIX
NANO_NAME=alix
NANO_ARCH=i386
TARGET_ARCH=i386; export TARGET_ARCH
NANO_IMAGES="2"
# Initialize the second slice =1, or not =0
NANO_INIT_IMG2="0"
#NANO_BOOT0CFG="-o packet,noupdate -s 1 -m 3"
NANO_BOOT0CFG="-o packet,update,nosetdrv -s 1 -m 3"

#FlashDevice Generic 4G
NANO_MEDIASIZE=7806960 # kingston 4G
NANO_DRIVE=ada0
#NANO_LABEL="nano"

NANO_RAM_TMPVARSIZE=60000 # 30M
NANO_RAM_ETCSIZE=60000 # 30M
NANO_CONFSIZE=200000 # 100M

# Options to put in make.conf during buildworld only
CONF_BUILD='
NO_CLEAN=YES
'
# Options to put in make.conf during installworld only
CONF_INSTALL='
'
# Options to put in make.conf during both build- & installworld.
CONF_WORLD='
CFLAGS=-O -pipe
WITHOUT_ACPI=
MODULES_OVERRIDE=netgraph rc4 cc/cc_cubic
BOOT_PXELDR_PROBE_KEYBOARD=1
BOOT_PXELDR_ALWAYS_SERIAL=1
BOOT_COMCONSOLE_SPEED=9600
'

# Kernel modules to install
NANO_MODULES='cc/cc_cubic'

customize_cmd cust_comconsole
customize_cmd cust_allow_ssh_root
customize_cmd cust_install_files

cust_install_files_local () (
    cd Files
    find . -print | grep -Ev '/(CVS|\.svn|\.hg|\.git)' | cpio -Ldumpv ${NANO_WORLDDIR}
)
customize_cmd cust_install_files_local

# Move additional stuff to /etc so that it can be saved in /cfg
cust_persist_extra() (

    cd ${NANO_WORLDDIR}

    # cron
    if [ -d var/cron ] ; then
        mkdir -p etc/cronvar
        cd var/cron
        find . -print | cpio -dumpl ../../etc/cronvar
        cd ..
        nano_rm -rf cron
        ln -s ../etc/cronvar cron
    fi

    cd ${NANO_WORLDDIR}

    # homedir
    mkdir -p etc/home
    ln -s etc/home home
)
customize_cmd cust_persist_extra


cust_install_pkgs() (

    PACKAGES="
atop
pkg
vim-lite
tmux
zsh
openvpn
tinc
isc-dhcp43-server
pftop
bwm-ng
py27-salt
sudo
unbound
dmidecode
curl
rsync
"

    /usr/sbin/pkg -c ${NANO_WORLDDIR} update

    for p in $PACKAGES
    do
        /usr/sbin/pkg -c ${NANO_WORLDDIR} install -y $p
    done

    nano_rm -rf ${NANO_WORLDDIR}/var/cache/pkg/*

    # Move pkgdb to /usr so package changes persist after reboots.
    # / needs to be remounted rw for pkg to work at runtime
    cd  ${NANO_WORLDDIR}
    mkdir -p usr/pkgdb
    cd var/db/pkg
    find . -print | cpio -dumpl ../../../usr/pkgdb
    cd ..
    nano_rm -rf pkg
    ln -s ../../usr/pkgdb pkg
)
customize_cmd cust_install_pkgs

cust_mksrv() (
    # Prevent cfg mgmt from trying to create it on ro filesystem.
    mkdir ${NANO_WORLDDIR}/srv
    chroot ${NANO_WORLDDIR} chown root:wheel /srv
)
customize_cmd cust_mksrv


cust_link_save_cfg() (

    cd  ${NANO_WORLDDIR}
    chmod 0755 root/save_cfg
    cd usr/local/bin/
    ln -s ../../../root/save_cfg save_cfg

)
customize_cmd cust_link_save_cfg


cust_newaliases() (
    chroot ${NANO_WORLDDIR} newaliases
)
customize_cmd cust_newaliases


# Build image suitable for running vagrant
cust_vagrant() (

    # create shared dir
    mkdir ${NANO_WORLDDIR}/vagrant

    # add vagrant user
    chroot ${NANO_WORLDDIR} pw add group vagrant
    chroot ${NANO_WORLDDIR} sh -c 'echo vagrant | pw add user vagrant -g vagrant -m -h 0'

    # setup ssh key
    mkdir ${NANO_WORLDDIR}/home/vagrant/.ssh
    fetch --no-verify-peer https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub -o ${NANO_WORLDDIR}/home/vagrant/.ssh/authorized_keys
    chroot ${NANO_WORLDDIR} chown -R vagrant:vagrant /home/vagrant/.ssh
    chmod 0700 ${NANO_WORLDDIR}/home/vagrant/.ssh
    chmod 0600 ${NANO_WORLDDIR}/home/vagrant/.ssh/authorized_keys

    # setup sudoers
    echo "vagrant ALL=(ALL) NOPASSWD: ALL" > ${NANO_WORLDDIR}/usr/local/etc/sudoers.d/vagrant

    # setup ssh
    echo "UseDNS no" >> ${NANO_WORLDDIR}/etc/ssh/sshd_config

)

if [ "${VAGRANT_IMAGE}" = true ]; then
    customize_cmd cust_vagrant
fi


last_orders () {
    pprint 2 "last orders"
    cp ${NANO_DISKIMGDIR}/_.disk.image /vagrant/nanobsd.image
    cp ${NANO_DISKIMGDIR}/_.disk.full /vagrant/nanobsd.full
}
